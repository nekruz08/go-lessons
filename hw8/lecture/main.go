// package main

// import "fmt"

//	func main() {
//		var arr [5]int
//		fmt.Println(arr)
//	}
//
// -------------------------------------------------------------------------------------------------
// Создание массива
// - Пустой массив:
// package main

// import "fmt"

//	func main() {
//		var arr [5]int
//		fmt.Println(arr)
//	}
//
// -------------------------------------------------------------------------------------------------
// - Инициализация массива с начальными значениями:
// package main

// import "fmt"

//	func main() {
//		var arr [5]int=[5]int{1,2,3,4,5}
//		fmt.Println(arr)
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

//	func main() {
//		arr:=[5]int{1,2,3,4,5}
//		fmt.Println(arr)
//	}
//
// -------------------------------------------------------------------------------------------------
//- Автоматическое определение длины массива:
// package main

// import "fmt"

//	func main() {
//		arr:=[...]int{1,2,3,4,5,6,7,8,9,10}
//		fmt.Println(arr)
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

//	func main() {
//		var matrix [3][4]int
//		matrix[0][0] = 1
//		matrix[0][1] = 2
//		matrix[1][0] = 1
//		matrix[1][1] = 2
//		matrix[2][3] = 10
//		fmt.Println(matrix)
//	}
//
// -------------------------------------------------------------------------------------------------
// - Ключи (индексы) массивов
// package main

// import "fmt"

//	func main() {
//		arr:=[5]int{0,0,0,0,0}
//		fmt.Println(arr)
//		arr[4]=1
//		fmt.Println(arr)
//		// fmt.Println(arr[5])
//	}
//
// -------------------------------------------------------------------------------------------------
// - Получение и изменение элементов по индексу
// package main

// import "fmt"

//	func main() {
//		arr:=[5]int{1,2,3,4,5}
//		fmt.Println(arr)
//		fmt.Println(arr[4])
//		arr[3]=3
//		fmt.Println(arr)
//	}
//
// -------------------------------------------------------------------------------------------------
// - Длина (len) и вместимость (cap) массива
// package main

// import "fmt"

//	func main() {
//		var arr [5]int
//		fmt.Println(len(arr))
//		fmt.Println(cap(arr))
//	}
//
// -------------------------------------------------------------------------------------------------
// - Итерация по массиву
// package main

// import "fmt"

// func main() {
// 	arr:=[10]int{1,2,3,4,5,6,7,8,9,10}
// 	// fmt.Println(arr)

//		for i := 0; i < len(arr); i++ {
//			fmt.Printf("%v ",arr[i])
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

// func main() {
// 	var arr = [...]int{1, 2, 4, 5, 6, 7, 8,9,10}

//		for _, v := range arr {
//			fmt.Printf("%v ",v)
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// Что такое срез
// package main

// import "fmt"

//	func main() {
//		var slice []int
//		var newSlice []int=[]int{1,2,3,4,5,6,7}
//		slice = append(slice, newSlice...)
//		fmt.Println(slice)
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

// func main() {
// 	s := make([]int, 0)
// 	fmt.Println(s, len(s), cap(s))
// 	s = append(s, 1)
// 	fmt.Println(s, len(s), cap(s))

//		s = make([]int, 0, 10)
//		fmt.Println(s, len(s), cap(s))
//		s = append(s, 1)
//		fmt.Println(s, len(s), cap(s))
//	}
//
// -------------------------------------------------------------------------------------------------
// Создание слайса
// Срезы можно создавать несколькими способами:
// - На основе массива:
// package main

// import "fmt"

// func main() {
// 	arr:=[5]int{1,2,3,4,5}
// 	slice:=arr[1:4] // срез содержит элементы со 2-го по 4-й (индексы 1, 2, 3)
// 	fmt.Println(slice)
// }
// -------------------------------------------------------------------------------------------------
// - С помощью литерала:
// package main

// import "fmt"

// func main() {
// 	slice:=[]int{1,2,3,4,5,6,7,8,9,10}
// 	fmt.Println(slice)
// }
// -------------------------------------------------------------------------------------------------
// - Пустой срез:
// package main

// import "fmt"

// func main() {
// var emptySlice []int
// fmt.Println(emptySlice==nil)
// fmt.Println(len(emptySlice))
// fmt.Println(cap(emptySlice))
// fmt.Println(emptySlice)

// }
// -------------------------------------------------------------------------------------------------
// Длина и вместимость слайса
// package main

// import "fmt"

// func main() {
// 	slice := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
// 	fmt.Println(slice)
// 	fmt.Println(len(slice))
// 	fmt.Println(cap(slice))

// }
// -------------------------------------------------------------------------------------------------
// Создание слайса через make
// package main

// import "fmt"

//	func main() {
//		slice := make([]int, 5,10) //первым элементом мы инициализируем столько то нулей вторым параметром зададим сколько элементов может вместит даанный слайс)
//		fmt.Println(slice)
//		fmt.Println(len(slice))
//		fmt.Println(cap(slice))
//	}
//
// -------------------------------------------------------------------------------------------------
// Функция append
// package main

// import (
// 	"fmt"
// )

// func main() {
// 	slices := []int{1, 2, 3}
// 	fmt.Println(len(slices))
// 	fmt.Println(cap(slices))

// 	slices = append(slices, 4, 5, 6, 7, 8, 9, 10)
// 	fmt.Println(len(slices))
// 	fmt.Println(cap(slices))
// 	slices=append(slices, 11)
// 	fmt.Println(slices)

// }
// -------------------------------------------------------------------------------------------------
// Конкатенация срезов
// package main

// import "fmt"

//	func main() {
//		slice1:=[]int{1,2,3}
//		slice2:=[]int{4,5}
//		slice3:=append(slice1,slice2...)
//		fmt.Println(slice3)
//	}
//
// -------------------------------------------------------------------------------------------------
// Операция слайсинг (создание среза на основе массива или слайса)
// package main

// import (
// 	"fmt"
// )

// func main() {
// 	arr := [5]int{1, 2, 3, 4, 5}
// 	slices := arr[1:4] // 234
// 	fmt.Println(slices)

//		slices2:=slices[3:4]
//		fmt.Println(slices2)
//	}
//
// -------------------------------------------------------------------------------------------------
// Функция copy
// package main

// import "fmt"

// func main() {
// 	src := []int{1, 2, 3}
// 	var dst []int {}

// 	copy(dst, src)
// 	fmt.Println(dst)
// }
// var nilSlice []int

// -------------------------------------------------------------------------------------------------
// Пустой слайс
// package main

// import "fmt"

// func main() {
// 	var slice []int = []int{}
// 	fmt.Println(slice==nil)
// 	fmt.Println(len(slice))
// 	fmt.Println(cap(slice))
// }
// -------------------------------------------------------------------------------------------------
// nil слайс
// package main

// import "fmt"

//	func main() {
//		var slice []int
//		fmt.Println(slice==nil)
//		// после инициализации уже не nil
//		slice=[]int{}
//		fmt.Println(slice==nil)
//		fmt.Println(len(slice))
//		fmt.Println(cap(slice))
//	}
//
// -------------------------------------------------------------------------------------------------
// Инициализация массива с использованием ключей (индексов)
// package main

// import "fmt"

//	func main() {
//		arr:=[5]int{0:10,4: 20}
//		fmt.Println(arr)
//	}
//
// -------------------------------------------------------------------------------------------------
// Копирование массива
// В отличие от срезов, при присваивании одного массива другому происходит
// копирование значений:
// Это значить если поменять второй  массив базовый т.е. первый не меняетсся, т.е. происходить реальное копированеи
// тогда как в массиве по мимо копирование она хранить в себе указатель на базовый массив изиеняя слаййс мы 
// изменяем базоввый массив
// с копированием массивово такое не прокатит
// с копийе что не поделай базовый массив остаетс неизменныи

package main

import "fmt"

func main() {
	arr1:=[]int{1,2,3}
	arr2:=arr1 // копирование значений
	arr2[0]=10
	fmt.Println(arr1)
	fmt.Println(arr2)

}