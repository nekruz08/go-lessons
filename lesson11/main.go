// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	// var str1 string="Hello, World!"
// 	// fmt.Println(str1)

// 	// str2:="Hello, World!"
// 	// fmt.Println(str2)

// 	// str3:=`	Hello, World!
// 	// Hello, World!`
// 	// fmt.Println(str3)

// 	// s1:="Hello, "
// 	// s2:="World"
// 	// s3:=s1+s2
// 	// fmt.Println(s3)

// 	// s := "Hello"
// 	// c := s[1]
// 	// fmt.Println(c)         //101 –±–∞–π—Ç —Å –∫–æ–¥–æ–º
// 	// fmt.Println(string(c)) // 'e' –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –±–∞–π—Ç –∫–æ–¥–æ–∞ –≤ string

// 	// s:="Hello, World!"
// 	// sub:=s[7:12] // –ø–æ—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —ç—Ç–∏–º –∏–Ω–¥–µ–∫—Å–∞–º —Ç.–µ. —Ç—Å—Ä–æ–∫—É World  12 –Ω–µ –≤–∫–ª—é—Å–∏—Ç–µ–ª—å–Ω–æ
// 	// fmt.Println(sub)

// 	// s1:="abc"
// 	// s2:="def"
// 	// fmt.Println(s1==s2)
// 	// fmt.Println(s1<s2)

// 	// s:="Hello, World!"
// 	// fmt.Println(strings.Contains(s,"World"))
// 	// fmt.Println(strings.Index(s,"World"))

// 	// s := "Hello, ‰∏ñÁïå"
// 	// bytes := []byte(s)
// 	// fmt.Println(bytes)

// 	// rune := []rune(s)
// 	// fmt.Println(rune)

// 	s := "Hello, ‰∏ñÁïå"
// 	fmt.Println(len(s)) // 13

// 	fmt.Println(utf8.RuneCountInString(s)) // 9 (–ø—Ä–∏ —É—Å–ª–æ–≤–∏–∏ —á—Ç–æ —Å—á–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª—è)

//		for i, r := range s {
//			fmt.Printf("%d: %c\n", i, r)
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	// –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
// 	str := "A√©‰∏ñÙè∞Ä"
// 	for len(str) > 0 {
// 		// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç
// 		r, size := utf8.DecodeRuneInString(str)
// 		fmt.Println(r)

// 		fmt.Printf("–†—É–Ω–∞: %c, Unicode: U+%04X, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size)
// 		// –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª

// 		str = str[size:]
// 	}
// }
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	str := "Hello, ‰∏ñÁïå"

// 	for len(str) > 0 {
// 		r, size := utf8.DecodeLastRuneInString(str)
// 		fmt.Printf("%X %v\n", r, size)

//			str = str[:len(str)-size]
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

// func main() {

//		str:="–ê–ê–ê"
//		for _, v := range str {
//			fmt.Println(v)
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

// func main() {

// 	str := "abc"
// 	fmt.Printf("%T\n",str[0])

//		for _, v := range str {
//			fmt.Printf("%T\n",v)
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	// –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
// 	str := "A√©‰∏ñÙè∞Ä"
// 	for len(str) > 0 {
// 		// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç
// 		r, size := utf8.DecodeRuneInString(str)
// 		fmt.Println(r)

// 		fmt.Printf("–†—É–Ω–∞: %c, Unicode: U+%04X, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size)
// 		// –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª

//			str = str[size:]
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	// –ü—Ä–∏–º–µ—Ä –±–∞–π—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ "A√©‰∏ñÙè∞Ä"

// 	data := []byte{0x41, 0xC3, 0xA9, 0xE4, 0xB8, 0x96, 0xF0, 0x9F, 0x98, 0x80}
// 	for len(data) > 0 {
// 		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Ä—É–Ω—É
// 		r, size := utf8.DecodeRune(data)
// 		fmt.Printf("–†—É–Ω–∞: %c, Unicode: U+%04X, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size)
// 		// –û–±—Ä–µ–∑–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —É–¥–∞–ª—è—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
// 		data = data[size:]
// 	}
// }
// -------------------------------------------------------------------------------------------------
// package main

// import (
//     "fmt"
// )

// func main() {
//     s := "Hello, ‰∏ñÁïå"

//     // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ –±–∞–π—Ç—ã
//     bytes := []byte(s)
//     fmt.Println(bytes) // [72 101 108 108 111 44 32 228 184 150 231 149 140]

//	    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä—É–Ω—ã
//	    runes := []rune(s)
//	    fmt.Println(runes) // [72 101 108 108 111 44 32 19990 30028]
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

// func main() {
// 	str := "A"
// 	fmt.Printf("%X\n", str[0]) // –≤ —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ä–∏—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ 65=0041
// 	fmt.Printf("%d\n", str[0])  // –≤ –¥–µ—Å—è—Ç—á–Ω–æ–π  —Å–∏—Å—Ç–µ–º–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ 65
// 	fmt.Printf("%b\n", str[0])  // –≤ –¥–≤–æ–∏—á–Ω–æ–π  —Å–∏—Å—Ç–µ–º–µ –∏—Å—á–∏—Å–ª–µ–Ω–∏–µ 65

// }
// -------------------------------------------------------------------------------------------------
// package main

// import (
//     "fmt"
//     "unicode/utf8"
// )

// func main() {
//     // –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
//     str := "A√©‰∏ñüòÄ"

//     for len(str) > 0 {
//         // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç
//         r, size := utf8.DecodeRuneInString(str)

//         fmt.Printf("–†—É–Ω–∞: %c, Unicode: U+%04X, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size)

//	        // –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
//	        str = str[size:]
//	    }
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	// –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
// 	str := "A√©‰∏ñüòÄ"

// 	for len(str) > 0 {
// 		// –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç
// 		r, size := utf8.DecodeRuneInString(str)

// 		// fmt.Printf("–†—É–Ω–∞: %c, Unicode: U+%04X, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size) 		// –®–ï–°–¢–ù–ê–î–¶–ê–†–ò–ß–ù–´–ô
// 		// fmt.Printf("–†—É–Ω–∞: %c, Demical: %d, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size)			// –î–ï–°–Ø–¢–ï–†–ò–ß–ù–´–ô
// 		fmt.Printf("–†—É–Ω–∞: %c, Binary: %b, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size) // –î–í–û–ò–ß–ù–´–ô

// 		// –û–±—Ä–µ–∑–∞–µ–º —Å—Ç—Ä–æ–∫—É, —É–¥–∞–ª—è—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
// 		str = str[size:]
// 	}
// }

// -------------------------------------------------------------------------------------------------
// package main

// import (
//     "fmt"
//     "strconv"
// )

//	func main() {
//	    hexNumber := "1F600"
//	    decimalValue, _ := strconv.ParseInt(hexNumber, 16, 64)
//	    binaryNumber := strconv.FormatInt(decimalValue, 2)
//	    fmt.Println(binaryNumber)
//	}
//
// -------------------------------------------------------------------------------------------------
// –≠—Ç–æ—Ç –∫–æ–¥ –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç –±–∞–π—Ç—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–∏–º–≤–æ–ª—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –±–∞–π—Ç–æ–≤ –∑–∞–Ω–∏–º–∞–µ—Ç
// –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª.
// –ö–æ–¥–∏—Ä–æ–≤–∫–∞ —Å–∏–º–≤–æ–ª–∞ –ø–æ –±–∞–π—Ç–∞–º
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	// –ü—Ä–∏–º–µ—Ä –±–∞–π—Ç–æ–≤–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–∏–º–≤–æ–ª–æ–≤ "A√©‰∏ñüòÄ"
// 	data := []byte{0x41, 0xC3, 0xA9, 0xE4, 0xB8, 0x96, 0xF0, 0x9F, 0x98, 0x80}
// 	// fmt.Println(len(data))

// 	for len(data) > 0 {
// 		// –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–µ—Ä–≤—É—é —Ä—É–Ω—É
// 		r, size := utf8.DecodeRune(data)

// 		fmt.Printf("–†—É–Ω–∞: %c, Unicode: U+%04X, –ó–∞–Ω–∏–º–∞–µ—Ç %d –±–∞–π—Ç\n", r, r, size)

//			// –û–±—Ä–µ–∑–∞–µ–º –±–∞–π—Ç–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —É–¥–∞–ª—è—è –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª
//			data = data[size:]
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, World!"
//		contains := strings.Contains(s, "World")
//		fmt.Println(contains) // true
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, Hello, Hello!"
//		count := strings.Count(s, "Hello")
//		fmt.Println(count) // 3
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, World!"
//		hasPrefix := strings.HasPrefix(s, "Hello") // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä—Ñ–∏–∫, —Å—É—Ñ–∏–∫—Å –Ω–µ —Å–º–æ—Ç—Ä–∏—Ç—å !
//		fmt.Println(hasPrefix) // true
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, World!"
//		hasSuffix := strings.HasSuffix(s, "World!")
//		fmt.Println(hasSuffix) // true
//	}
//
// -------------------------------------------------------------------------------------------------
// Index
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, World!"
//		index := strings.Index(s, "World")
//		fmt.Println(index) // 7
//	}
//
// -------------------------------------------------------------------------------------------------
// –∏ LastIndex
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, World!"
//		lastIndex := strings.LastIndex(s, "l") // Last index —Ç.–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—å –∏–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–æ–≥–æ l -a –∞ –Ω–µ –∏–Ω–µ–¥–∫—Å –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö
//		fmt.Println(lastIndex) // 10
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {

//		parts := []string{"Hello", "World"}
//		joined := strings.Join(parts, ", ")
//		fmt.Println(joined) // "Hello, World"
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Go"
//		repeated := strings.Repeat(s, 3) //–ø–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç—Ä–∏–Ω–≥ —É —É—Ç—Ä–æ–µ–Ω–Ω—ã–º Go, —Ç.–µ. GoGoGo
//		fmt.Println(repeated) // "GoGoGo"
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, World! Hello, Go!"
//		// replaced := strings.Replace(s, "Hello", "Hi", 0) // –ï—Å–ª–∏ –Ω–æ–ª —Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
//		// replaced := strings.Replace(s, "Hello", "Hi", 1) // –ï—Å–ª–∏ 1 —Ç–æ –∑–∞–º–µ–Ω—è—Ç—å –±—É–¥–µ—Ç—å 1 —Ä–∞–∑–∞
//		replaced := strings.Replace(s, "Hello", "Hi", 2) // –ï—Å–ª–∏ 2 —Ç–æ –∑–∞–º–µ–Ω—è—Ç—å –±—É–¥–µ—Ç—å 2 —Ä–∞–∑–∞
//		fmt.Println(replaced)                            // "Hi, World! Hello, Go!"
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

//	func main() {
//		s := "Hello, World! Hello, Go!"
//		replacedAll := strings.ReplaceAll(s, "Hello", "Hi")	// —Ç—É—Ç –∑–∞–º–µ–Ω—è–µ—Ç—Å—è –≤—Å–µ
//		fmt.Println(replacedAll) // "Hi, World! Hi, Go!"
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {
// 	s := "a,b,c,d"
// 	split := strings.Split(s, ",") // –æ—Ç–¥–∞–µ–º –æ—Ä–∏–Ω—Ç–∏—Ä –ø–æ –∫–∞–∫–æ–º—É —Å–∏–º–≤–æ–ª—É —Ä–∞–∑–¥–µ–ª—è–π
// 	fmt.Println(split) // ["a", "b", "c", "d"]
// }
// -------------------------------------------------------------------------------------------------

// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {
// 	s := "a,b,c,d"
// 	splitN := strings.SplitN(s, ",", 2)  // –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–ø—è—Ç—É—é –∏ –¥–µ–ª–∏—Ç—å –Ω–∞ –¥–≤–∞ (—Å–ª–∞–π –∏–∑ –¥–≤—É—Ö —Å—Ç—Ä–æ–∫)
// 	for _, v := range splitN {
// 		fmt.Println(v) // ["a", "b,c,d"]

//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {
// 	s := "Hello, World!"
// 	lower := strings.ToLower(s)
// 	fmt.Println(lower) // "hello, world!"

// }
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {
// 	s := "Hello, World!"
// 	upper := strings.ToUpper(s)
// 	fmt.Println(upper) // "HELLO, WORLD!"

// }
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {
// 	s := "  Hello, World!  "
// 	// –§—É–Ω–∫—Ü–∏—è strings.Trim —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ s.
// 	trimmed := strings.Trim(s, " ")
// 	fmt.Println(trimmed) // "Hello, World!"

//		// –§—É–Ω–∫—Ü–∏—è strings.TrimSpace —É–¥–∞–ª—è–µ—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏ s.
//		trimSpace := strings.TrimSpace(s)
//		fmt.Println(trimSpace) // "Hello, World!"
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {
// 	s := "Hello, World!"
// 	prefix := "Hello"

//		// –§—É–Ω–∫—Ü–∏—è strings.TrimPrefix —É–¥–∞–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å prefix –∏–∑ —Å—Ç—Ä–æ–∫–∏ s.
//		trimPrefix := strings.TrimPrefix(s, prefix)
//		fmt.Println(trimPrefix) // "  Hello, World!  "
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strings"
// )

// func main() {
// 	s := "Hello, World!"
// 	suffix := "World!"

//		// –§—É–Ω–∫—Ü–∏—è strings.TrimSuffix —É–¥–∞–ª—è–µ—Ç —Å—É—Ñ—Ñ–∏–∫—Å suffix –∏–∑ —Å—Ç—Ä–æ–∫–∏ s.
//		trimSuffix := strings.TrimSuffix(s, suffix)
//		fmt.Println(trimSuffix) // "  Hello, World!  "
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strconv"
// )

// func main() {
// 	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
// 	i, err := strconv.Atoi("123")
// 	if err != nil {
// 		fmt.Println(err)
// 	} else {
// 		fmt.Printf("%T,%d\n", i, i) // "123"
// 	}
// }

// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strconv"
// )

// func main() {
// 	// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É
// 	s := strconv.Itoa(123)
// 	fmt.Printf("%T,%s",s,s) // "123"

// }
// -------------------------------------------------------------------------------------------------
// package main
// import (
//     "fmt"
//     "strconv"
// )

// func main() {
//     // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –±–∞–∑—ã
//     i, err := strconv.ParseInt("1A", 16, 64)
//     if err != nil {
//         fmt.Println(err)
//     } else {
//         fmt.Println(i) // 26
//     }

//     // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫—É —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –±–∞–∑—ã
//     s := strconv.FormatInt(26, 16)
//     fmt.Println(s) // "1a"
// }
// -------------------------------------------------------------------------------------------------
// package main
// import (
// 	"fmt"
// 	"strconv"
// )

// func main() {
// 	// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ –∫ —Å—Ç—Ä–æ–∫–µ
// 	s := strconv.Quote("Hello, World!")
// 	fmt.Println(s) // "\"Hello, World!\""

//		// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–≤—ã—á–µ–∫ –∏–∑ —Å—Ç—Ä–æ–∫–∏
//		unquoted, err := strconv.Unquote(s)
//		if err != nil {
//			fmt.Println(err)
//		} else {
//			fmt.Println(unquoted) // "Hello, World!"
//		}
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"strconv"
// )

//	func main() {
//		b := []byte("Number: ")
//		b = strconv.AppendInt(b, 123, 10)
//		fmt.Println(string(b)) // "Number: 123"
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode"
// )

// func main() {
// 	r := 'a' //it works just with one character
// 	fmt.Println(string(unicode.ToUpper(r))) // "A"

//		r = 'A'
//		fmt.Println(string(unicode.ToLower(r))) // "a"
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	b := []byte("‰∏ñÁïå")
// 	r, size := utf8.DecodeRune(b)
// 	fmt.Printf("Rune: %c, Size: %d\n", r, size) // Rune: H, Size: 1

// 	s := "‰∏ñÁïå"
// 	r, size = utf8.DecodeRuneInString(s)
// 	fmt.Printf("Rune: %c, Size: %d\n", r, size) // Rune: H, Size: 1
// }
// -------------------------------------------------------------------------------------------------
// package main
// import (
//     "fmt"
//     "unicode/utf8"
// )

//	func main() {
//	    r := '‰∏ñ'
//	    buf := make([]byte, 3)
//	    size := utf8.EncodeRune(buf, r)
//	    fmt.Printf("Encoded: % x, Size: %d\n", buf, size) // Encoded: e4 b8 96, Size: 3
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	r := 'A'
// 	size := utf8.RuneLen(r)
// 	fmt.Printf("Rune: %c, Size: %d\n", r, size) // Rune: ‰∏ñ, Size: 3
// }

// -------------------------------------------------------------------------------------------------
// package main
// import (
//     "fmt"
//     "unicode/utf8"
// )

// func main() {
//     b := []byte("Hello, ‰∏ñÁïå")
//     count := utf8.RuneCount(b)
//     fmt.Printf("Byte slice: %d runes\n", count) // Byte slice: 9 runes

//	    s := "Hello, ‰∏ñÁïå"
//	    count = utf8.RuneCountInString(s)
//	    fmt.Printf("String: %d runes\n", count) // String: 9 runes
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import (
// 	"fmt"
// 	"unicode/utf8"
// )

// func main() {
// 	b := []byte("Hello, ‰∏ñÁïå")
// 	count := utf8.RuneCount(b)
// 	fmt.Printf("Byte slice: %d runes\n", count) // Byte slice: 9 runes

// 	s := "Hello, ‰∏ñÁïå"
// 	count = utf8.RuneCountInString(s)
// 	fmt.Printf("String: %d runes\n", count) // String: 9 runes
// }

// -------------------------------------------------------------------------------------------------
package main

import (
	"fmt"
	"unsafe"
)

func main() {
	s := "Hello, World!"

	// –ü–æ–ª—É—á–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –µ—ë –¥–ª–∏–Ω—É
	header := (*[2]uintptr)(unsafe.Pointer(&s))
	dataPtr := header[0]
	length := int(header[1])

	fmt.Printf("String: %s\n", s)
	fmt.Printf("Data pointer: %x\n", dataPtr)
	fmt.Printf("Length: %d\n", length)
}

// -------------------------------------------------------------------------------------------------
