// Abdulhalim Ergashev, [7/22/24 18:52]
// Определение возраста совершеннолетия
// Определите тип Age на основе int. Напишите функцию, которая принимает возраст и возвращает сообщение о том,
// является ли человек совершеннолетним (возраст 18 лет и старше) или нет.

// Abdulhalim Ergashev, [7/22/24 18:53]
// Проверка на четность
// Определите тип Number на основе int. Напишите функцию, которая принимает число и возвращает сообщение о том,
// является ли оно четным или нечетным.

// Abdulhalim Ergashev, [7/22/24 18:53]
// Проверка допустимого диапазона
// Определите тип Score на основе int. Напишите функцию, которая принимает оценку и возвращает сообщение,
// находится ли она в допустимом диапазоне от 0 до 100

// Abdulhalim Ergashev, [7/22/24 18:54]
// Арифметические операции
// Определите тип функции Operation, которая принимает два int и возвращает int. Напишите функции для сложения,
// вычитания и умножения. Используйте тип Operation для вызова этих функций

// Abdulhalim Ergashev, [7/22/24 18:54]
// Сравнение чисел
// Определите тип функции Comparator, которая принимает два int и возвращает bool. Напишите функции для проверки
// равенства и сравнения больше/меньше. Используйте тип Comparator для вызова этих функций.

// Abdulhalim Ergashev, [7/22/24 18:54]
// Применение функции к числу
// Определите тип функции UnaryOperation, которая принимает int и возвращает int. Напишите функции для удвоения
// и утроения числа. Используйте тип UnaryOperation для вызова этих функций.
//-------------------------------------------------------------------------------------------------
// package main

// import "fmt"
// type Age int
//
//	func main() {
//		var myAge Age = 25
//		var apple int = 25
//		fmt.Println(myAge+Age(apple))
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

// type Adder func(int, int) int

// func add(a int, b int) int {
// 	return a + b
// }

//	func main() {
//		var myAdder Adder = add
//		result := myAdder(2, 3)
//		fmt.Println(result)
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"
// type MyInt=int
//
//	func main() {
//		var x MyInt=10
//		var y int=10
//		fmt.Println(x+y)
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"
// type Person struct{
// 	Name string
// 	Age int
// }
// func main() {
// 	p:=Person{
// 		Name: "Alice",
// 		Age: 31,
// 	}
// 	fmt.Println(p)
// 	fmt.Printf("%+v\n",p)

// }
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"
// type Person struct{
// 	Name string
// 	Age int
// }
// func main() {
// 	a:=Person{Name: "Salomat",Age: 31}
// 	b:=Person{"Adolat",32}
// 	c:=new(Person)
// 	c.Name="Alice"
// 	c.Age=32
// 	d:=&Person{Name: "Halovat",Age: 33}

// 	fmt.Printf("%+v\n%+v\n%+v\n%+v\n",a,b,c,d)

// }
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"
//
//	type Person struct{
//		Name string
//		Age int
//	}
//
//	func main() {
//		p:=Person{Name: "Alice",Age:30}
//		fmt.Println(p.Name)
//		fmt.Println(p.Age)
//	}
//
// -------------------------------------------------------------------------------------------------
// Обратный отсчет
// Создайте псевдоним для типа int под названием Count.
// Напишите функцию, которая принимает Count и выводит
// обратный отсчет до нуля.
// package main

// import "fmt"
// type Count=int
//
//	func a(c Count) {
//		for i := c; i >=0; i-- {
//			fmt.Println(i)
//		}
//	}
//
//	func main() {
//		a(10)
//	}
//
// -------------------------------------------------------------------------------------------------
// Проверка температуры
// Создайте псевдоним для типа float64 под названием Temperature.
// Напишите функцию, которая принимает
// Temperature и выводит сообщение о состоянии (ниже нуля, выше нуля или ноль).
// package main

// import "fmt"
// type Temperature=float64
//
//	func a(b Temperature)  {
//		if b<0{
//			fmt.Println("ниже нуля")
//		}else if b>0{
//			fmt.Println("выше нуля")
//		}
//	}
//
//	func main() {
//		a(2)
//	}
//
// -------------------------------------------------------------------------------------------------
// Применение скидки
// Создайте псевдоним для типа float64 под названием Price.
// Напишите функцию, которая принимает Price и возвращает новую цену с 10% скидкой.
// package main

// import "fmt"
// type Price = float64
// func a(p Price) float64 {
// 	return (p-float64(p/10))
// }
// func main() {
// 	fmt.Println(a(100))

// }
// -------------------------------------------------------------------------------------------------
// Информация о пользователе
// Создайте структуру User с полями Name (строка) и Age (целое число).
// Напишите функцию, которая принимает User и выводит информацию о нем.
// package main

// import "fmt"
//
//	type User struct{
//		Name string
//		Age int
//	}
//
//	func a(s User) {
//		fmt.Printf("%+v\n",s)
//	}
//
//	func main() {
//		b:=User{
//			Name: "Abdurahmon",
//			Age: 32,
//		}
//		a(b)
//		a(User{"Alica",32})
//	}
//
// -------------------------------------------------------------------------------------------------
// Продукт и его стоимость
// Создайте структуру Product с полями Name (строка) и Price (тип Price).
// Напишите функцию, которая принимает Product и возвращает сообщение о его стоимости.
// package main

// import "fmt"

// type Price float64
//
//	type Product struct {
//		Name  string
//		Price Price
//	}
//
//	func a(p Product)  {
//		fmt.Printf("%+v",p)
//	}
//
//	func main() {
//		var price = 12.5
//		product:=Product{
//			Name: "Каймок",
//			Price: Price(price),
//		}
//		a(product)
//	}
//
// -------------------------------------------------------------------------------------------------
// Информация о книге
// Создайте структуру Book с полями Title (строка), Author (строка) и Pages (целое число).
// Напишите функцию,которая принимает Book и выводит информацию о книге.
// package main

// import "fmt"
//
//	type Book struct{
//		Title string
//		Author string
//		Pages int
//	}
//
//	func a(b Book) {
//		fmt.Printf("%+v\n",b)
//	}
//
//	func main() {
//		var book Book=Book{
//			Title: "Who he was",
//			Author: "Nekruz",
//			Pages: 100,
//		}
//		a(book)
//	}
//
// -------------------------------------------------------------------------------------------------
// Изменение данных через указатель
// Создайте структуру Person с полями Name и Age.
// Напишите функцию, которая принимает указатель на Person
// и обновляет его возраст. Выведите информацию до и после обновления.
// package main

// import "fmt"

// type Person struct {
// 	Name string
// 	Age  int
// }

// func a(p *Person) {
// 	p.Age = p.Age + 1
// }
// func main() {
// 	p := Person{
// 		Name: "Nekruz",
// 		Age:  30,
// 	}
// 	fmt.Printf("%+v\n", p)
// 	a(&p)
// 	fmt.Printf("%+v\n", p)

// }
// -------------------------------------------------------------------------------------------------
// Создание и изменение структуры через указатель
// Создайте структуру Rectangle с полями Width и Height.
// Напишите функцию, которая принимает указатель на Rectangle,
// вычисляет и обновляет его площадь, а затем выводит обновленную площадь.
// package main

// import "fmt"
//
//	type Rectangle struct{
//		Width	int
//		Height int
//	}
//
//	func a(r *Rectangle)  {
//		fmt.Println(r.Width*r.Height)
//		r.Width=3
//		r.Height=4
//		fmt.Println(r.Width*r.Height)
//	}
//
//	func main() {
//		a(&Rectangle{2,2})
//	}
//
// -------------------------------------------------------------------------------------------------
// Сравнение двух структур через указатели
// Создайте структуру Coordinate с полями X и Y. Напишите функцию, которая принимает указатели на две
// Coordinate и возвращает сообщение о том, равны ли они или нет.
// package main

// import "fmt"

// type Coordinate struct {
// 	x int
// 	y int
// }

// func CompareCoordinates(a,b Coordinate) bool {
// 	if a==b{
// 		return true
// 	}else{
// 		return false
// 	}
// }

// func main() {
// 	a := Coordinate{x: 1, y: 2}
// 	b := Coordinate{x: 1, y: 2}

//		fmt.Println(CompareCoordinates(a,b))
//	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

// func main() {
// 	slice1:=[]int{1,2,3,4}
// 	slice2:=[]int{4,5,4,5,5}
// 	slice3:=append(slice1,slice2...)
// 	fmt.Println(len(slice3),cap(slice3))
// }

// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

//	func main() {
//		slice1:=[5]int{1,2,3,4,5}
//		slice2:=[]int{4,5,4,5,5}
//		slice3:=append(slice1,slice2...)
//		fmt.Println(len(slice3),cap(slice3))
//	}
//
// -------------------------------------------------------------------------------------------------
// Создайте массив из 7 целых чисел и инициализируйте его значениями от 1 до 7.
// package main

// import "fmt"

// func main() {
// 	m:=[7]int{1,2,3,4,5,6,7}
// 	fmt.Println(m)
// }
// -------------------------------------------------------------------------------------------------
// Создайте массив из 5 строк и инициализируйте его значениями "a", "b", "c", "d", "e".
// package main

// import "fmt"

//	func main() {
//		m:=[5]string{"a", "b", "c", "d", "e"}
//		fmt.Println(m)
//	}
//
// -------------------------------------------------------------------------------------------------
// Создайте массив из 4 логических значений и инициализируйте его значениями true, false, true, false.
// package main

// import "fmt"

//	func main() {
//		m:=[4]bool{true,false,true,false}
//		fmt.Println(m)
//	}
//
// -------------------------------------------------------------------------------------------------
// Создайте массив из 10 целых чисел без инициализации и выведите его на экран.
// package main

// import "fmt"

// func main() {
// var m [10]int
// fmt.Println(m)
// }
// -------------------------------------------------------------------------------------------------
// Создайте массив из 4 логических значений и выведите значения по индексам 1 и 3.
// package main

// import "fmt"

//	func main() {
//		var m [4]bool = [4]bool{false, true, false, true}
//		fmt.Println(m[1], m[3])
//	}
//
// -------------------------------------------------------------------------------------------------
// Создайте массив из 3 логических значений и измените значение первого элемента на false.
// package main

// import "fmt"

//	func main() {
//		var m [3]bool=[3]bool{false,true,false}
//		m[0]=true
//		fmt.Println(m)
//	}
//
// -------------------------------------------------------------------------------------------------
// Создайте массив из 4 строк и выведите все его элементы с помощью цикла for range.
// package main

// import "fmt"

// 	func main() {
// 		var m [4]string=[4]string{"a","b","c","d"}
// 		fmt.Println(m)
// 	}
//
// -------------------------------------------------------------------------------------------------
// package main

// import "fmt"

//	func main() {
//		var a [10]int = [10]int{1, 2, 4, 5, 6, 7, 8, 9, 11}
//		idx := 0
//		for i, v := range a {
//			if a[0] > v && v < a[9] {
//				idx = i
//				break
//			}
//		}
//		fmt.Println(idx)
//	}
//
// -------------------------------------------------------------------------------------------------
// Дан целочисленный массив размера N, не содержащий одинаковых чисел.
// Проверить, образуют ли его элементы арифметическую прогрес- сию (см. задание Array3).
// Если образуют, то вывести разность прогрессии, если нет — вывести 0.
package main

import "fmt"

func main() {
	m:=[10]int{1,2,3,4,5,6,7,8,9,10}
	fmt.Println(m)

}