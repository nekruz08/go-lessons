// •	Умножить все элементы массива на заданное число.
// •	Найти все индексы заданного числа в массиве.
// •	Создать копию массива.
// •	Объединить два массива.
// •	Поменять местами максимальный и минимальный элементы массива.
// •	Проверить, является ли массив палиндромом.
// •	Найти второе наибольшее число в массиве.
// •	Перевернуть массив.
// •	Удалить дубликаты из массива.
// •	Переместить все нули в конце массива, сохраняя порядок ненулевых элементов.
// •	Найти пересечение двух массивов.
// •	Проверить, является ли массив подмножеством другого массива.
// •	Объединить два отсортированных массива в один отсортированный.
// •	Найти длину самого длинного подмассива, в котором все элементы различны.
// •	Найти все подмассивы, сумма которых равна заданному числу.
// •	Найти пару элементов в массиве, сумма которых равна заданному числу.
// •	Найти наименьший положительный элемент, отсутствующий в массиве.
// •	Найти максимальную сумму подмассива с условием, что подмассив не должен содержать более двух различных элементов.
// •	Найти максимальную длину подмассива, сумма элементов которого равна заданному числу.
// •	Найти максимальное произведение трех чисел в массиве.
// •	Найти подмассив с максимальной суммой.
// •	Переместить все отрицательные числа в начало массива, сохраняя порядок остальных чисел.
// •	Найти подмассив с наибольшей длиной, сумма элементов которого равна нулю.
// •	Найти наибольший общий делитель всех элементов массива.

//-------------------------------------------------------------------------------------------------
//Найти минимальный элемент в массиве.
// package main

// import (
//     "fmt"
// )

// func main() {
//     arr := [7]int{10, 5, 3, 8, 7, 2, 9}
//     min := findMin(arr)
//     fmt.Println(min)
// }

// func findMin(arr [7]int) int {
//     min := arr[0]
//     for _, value := range arr {
//         if value < min {
//             min = value
//         }
//     }
//     return min
// }
//-------------------------------------------------------------------------------------------------
// Подсчитать количество положительных чисел в массиве.
// package main

// import (
//     "fmt"
// )

// func main() {
//     arr := [7]int{10, -5, -3, -8, -7, 2, 9}
//     min := positivNum(arr)
//     fmt.Println(min)
// }

// func positivNum(arr [7]int) int {
//     count := 0
//     for _, value := range arr {
//         if value > 0 {
//             count++
//         }
//     }
//     return count
// }
//-------------------------------------------------------------------------------------------------
// Найти сумму всех элементов массива.
// package main

// import (
//     "fmt"
// )

// func main() {
//     var arr [7]int=[7]int{10, 1, 0, 0, 0, 0, 0}
//     min := sum(arr)
//     fmt.Println(min)
// }

//	func sum(arr [7]int) int {
//	    sum := 0
//	    for _, value := range arr {
//	            sum+=value
//	    }
//	    return sum
//	}
//
// -------------------------------------------------------------------------------------------------
// Найти среднее значение всех элементов массива.
// package main

// import (
// 	"fmt"
// )

// func main() {
// 	var arr [7]int = [7]int{15, 25, 0, 0, 0, 0, 0}
// 	min := sum(arr)
// 	fmt.Println(min)
// }

// func sum(arr [7]int) int {
// 	sum := 0
// 	count := 0

//		for _, value := range arr {
//			sum += value
//			if value > 0 {
//				count++
//			}
//		}
//		return sum / count
//	}
//
// -------------------------------------------------------------------------------------------------
// Удалить все вхождения заданного числа из массива.
package main

import (
	"fmt"
)

func main() {
	arr := [10]int{10, 5, 3, 8, 7, 2, 9, 5, 6, 5}
	numberToRemove := 5

	arrSlice := arr[:]

	newArrSlice := removeOccurrences(arrSlice, numberToRemove)

	var newArr [10]int
	copy(newArr[:], newArrSlice)

	fmt.Printf("Массив после удаления %d: %v\n", numberToRemove, newArr)
}

func removeOccurrences(arr []int, number int) []int {
	result := []int{}

	for _, value := range arr {
		if value != number {
			result = append(result, value)
		}
	}

	return result
}
